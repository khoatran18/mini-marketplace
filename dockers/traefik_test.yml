services:
  traefik:
    image: traefik:v3.4
    networks:
      - test-network

    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host

    volumes:
      # To access Swarm API (Swarm Provider)
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs:ro
      - ./traefik_config/dynamic:/dynamic:ro

    command:
      # HTTP Entrypoint
      - "--entrypoints.web.address=:80"

      # Redirection HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"

      # HTTPS Entrypoint
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"

      # Dynamic TLS file
      - "--providers.file.filename=/dynamic/tls.yml"

      # Enable Docker Swarm Provider
      - "--providers.swarm.endpoint=unix:///var/run/docker.sock"

      # Watch Swarm service change (require Socker)
      - "--providers.swarm.watch=true"

      # Not expose service by default
      - "--providers.swarm.exposedbydefault=false"

      # Default network for Traefik to connect to services
      - "--providers.swarm.network=test-network"

      # API & Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"

      # Log & Metric
      - "--log.level=INFO"
      - "accesslog=true"

    deploy:
      mode: replicated
      replicas: 1

      # Where Traefik task can run
      placement:
        constraints:
          - node.role == manager

      # Traefik dynamic configuration via labels
      labels:
        - "traefik.enable=true"

        # Dashboard router
        - "traefik.http.routers.dashboard.rule=Host(`dashboard.swarm.localhost`)"
        - "traefik.http.routers.dashboard.entrypoints=websecure"
        - "traefik.http.routers.dashboard.service=api@internal"
        - "traefik.http.routers.dashboard.tls=true"

        # Basic-auth middleware
        - "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$apr1$$1qkpPb/w$$74TPPWZlkcDyLkW.VvZGB0"
        - "traefik.http.routers.dashboard.middlewares=dashboard-auth@swarm"

        # Service hint
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Deploy the Whoami application
  whoami:
    image: traefik/whoami
    networks:
      - test-network
    deploy:
      labels:

        # Enable Service discovery for Traefik, define router, HTTPS Entrypoint, TLS, port balance
        - "traefik.enable=true"
        - "traefik.http.routers.whoami.rule=Host(`whoami.swarm.localhost`)"
        - "traefik.http.routers.whoami.entrypoints=websecure"
        - "traefik.http.routers.whoami.tls=true"
        - traefik.http.services.whoami.loadbalancer.server.port=80

        # Middlewares
        - "traefik.http.routers.whoami.middlewares=secure-headers"
        - "traefik.http.middlewares.secure-headers.headers.frameDeny=true"
        - "traefik.http.middlewares.secure-headers.headers.sslRedirect=true"
        - "traefik.http.middlewares.secure-headers.headers.browserXssFilter=true"
        - "traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true"
        - "traefik.http.middlewares.secure-headers.headers.stsIncludeSubdomains=true"
        - "traefik.http.middlewares.secure-headers.headers.stsPreload=true"
        - "traefik.http.middlewares.secure-headers.headers.stsSeconds=31536000"


networks:
  test-network:
    driver: overlay