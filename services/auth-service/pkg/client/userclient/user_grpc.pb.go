// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: user.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_CreateBuyer_FullMethodName         = "/user_service.pkg.pb.UserService/CreateBuyer"
	UserService_UpdateBuyerByUserID_FullMethodName = "/user_service.pkg.pb.UserService/UpdateBuyerByUserID"
	UserService_GetBuyerByUserID_FullMethodName    = "/user_service.pkg.pb.UserService/GetBuyerByUserID"
	UserService_DelBuyerByUserID_FullMethodName    = "/user_service.pkg.pb.UserService/DelBuyerByUserID"
	UserService_CreateSeller_FullMethodName        = "/user_service.pkg.pb.UserService/CreateSeller"
	UserService_UpdateSellerByID_FullMethodName    = "/user_service.pkg.pb.UserService/UpdateSellerByID"
	UserService_GetSellerByID_FullMethodName       = "/user_service.pkg.pb.UserService/GetSellerByID"
	UserService_DelSellerByID_FullMethodName       = "/user_service.pkg.pb.UserService/DelSellerByID"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateBuyer(ctx context.Context, in *CreateBuyerRequest, opts ...grpc.CallOption) (*CreateBuyerResponse, error)
	UpdateBuyerByUserID(ctx context.Context, in *UpdateBuyerByUserIDRequest, opts ...grpc.CallOption) (*UpdateBuyerByUserIDResponse, error)
	GetBuyerByUserID(ctx context.Context, in *GetBuyerByUserIDRequest, opts ...grpc.CallOption) (*GetBuyerByUserIDResponse, error)
	DelBuyerByUserID(ctx context.Context, in *DelBuyerByUserIDRequest, opts ...grpc.CallOption) (*DelBuyerByUserIDResponse, error)
	CreateSeller(ctx context.Context, in *CreateSellerRequest, opts ...grpc.CallOption) (*CreateSellerResponse, error)
	UpdateSellerByID(ctx context.Context, in *UpdateSellerByIDRequest, opts ...grpc.CallOption) (*UpdateSellerByIDResponse, error)
	GetSellerByID(ctx context.Context, in *GetSellerByIDRequest, opts ...grpc.CallOption) (*GetSellerByIDResponse, error)
	DelSellerByID(ctx context.Context, in *DelSellerByIDRequest, opts ...grpc.CallOption) (*DelSellerByIDResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateBuyer(ctx context.Context, in *CreateBuyerRequest, opts ...grpc.CallOption) (*CreateBuyerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBuyerResponse)
	err := c.cc.Invoke(ctx, UserService_CreateBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateBuyerByUserID(ctx context.Context, in *UpdateBuyerByUserIDRequest, opts ...grpc.CallOption) (*UpdateBuyerByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBuyerByUserIDResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateBuyerByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetBuyerByUserID(ctx context.Context, in *GetBuyerByUserIDRequest, opts ...grpc.CallOption) (*GetBuyerByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBuyerByUserIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetBuyerByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DelBuyerByUserID(ctx context.Context, in *DelBuyerByUserIDRequest, opts ...grpc.CallOption) (*DelBuyerByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelBuyerByUserIDResponse)
	err := c.cc.Invoke(ctx, UserService_DelBuyerByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateSeller(ctx context.Context, in *CreateSellerRequest, opts ...grpc.CallOption) (*CreateSellerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSellerResponse)
	err := c.cc.Invoke(ctx, UserService_CreateSeller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateSellerByID(ctx context.Context, in *UpdateSellerByIDRequest, opts ...grpc.CallOption) (*UpdateSellerByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSellerByIDResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateSellerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSellerByID(ctx context.Context, in *GetSellerByIDRequest, opts ...grpc.CallOption) (*GetSellerByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSellerByIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetSellerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DelSellerByID(ctx context.Context, in *DelSellerByIDRequest, opts ...grpc.CallOption) (*DelSellerByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelSellerByIDResponse)
	err := c.cc.Invoke(ctx, UserService_DelSellerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	CreateBuyer(context.Context, *CreateBuyerRequest) (*CreateBuyerResponse, error)
	UpdateBuyerByUserID(context.Context, *UpdateBuyerByUserIDRequest) (*UpdateBuyerByUserIDResponse, error)
	GetBuyerByUserID(context.Context, *GetBuyerByUserIDRequest) (*GetBuyerByUserIDResponse, error)
	DelBuyerByUserID(context.Context, *DelBuyerByUserIDRequest) (*DelBuyerByUserIDResponse, error)
	CreateSeller(context.Context, *CreateSellerRequest) (*CreateSellerResponse, error)
	UpdateSellerByID(context.Context, *UpdateSellerByIDRequest) (*UpdateSellerByIDResponse, error)
	GetSellerByID(context.Context, *GetSellerByIDRequest) (*GetSellerByIDResponse, error)
	DelSellerByID(context.Context, *DelSellerByIDRequest) (*DelSellerByIDResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) CreateBuyer(context.Context, *CreateBuyerRequest) (*CreateBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuyer not implemented")
}
func (UnimplementedUserServiceServer) UpdateBuyerByUserID(context.Context, *UpdateBuyerByUserIDRequest) (*UpdateBuyerByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuyerByUserID not implemented")
}
func (UnimplementedUserServiceServer) GetBuyerByUserID(context.Context, *GetBuyerByUserIDRequest) (*GetBuyerByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyerByUserID not implemented")
}
func (UnimplementedUserServiceServer) DelBuyerByUserID(context.Context, *DelBuyerByUserIDRequest) (*DelBuyerByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBuyerByUserID not implemented")
}
func (UnimplementedUserServiceServer) CreateSeller(context.Context, *CreateSellerRequest) (*CreateSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeller not implemented")
}
func (UnimplementedUserServiceServer) UpdateSellerByID(context.Context, *UpdateSellerByIDRequest) (*UpdateSellerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSellerByID not implemented")
}
func (UnimplementedUserServiceServer) GetSellerByID(context.Context, *GetSellerByIDRequest) (*GetSellerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerByID not implemented")
}
func (UnimplementedUserServiceServer) DelSellerByID(context.Context, *DelSellerByIDRequest) (*DelSellerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSellerByID not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateBuyer(ctx, req.(*CreateBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateBuyerByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuyerByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateBuyerByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateBuyerByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateBuyerByUserID(ctx, req.(*UpdateBuyerByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetBuyerByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuyerByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetBuyerByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetBuyerByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetBuyerByUserID(ctx, req.(*GetBuyerByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DelBuyerByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBuyerByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DelBuyerByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DelBuyerByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DelBuyerByUserID(ctx, req.(*DelBuyerByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateSeller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateSeller(ctx, req.(*CreateSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateSellerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateSellerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateSellerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateSellerByID(ctx, req.(*UpdateSellerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSellerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSellerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetSellerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSellerByID(ctx, req.(*GetSellerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DelSellerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSellerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DelSellerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DelSellerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DelSellerByID(ctx, req.(*DelSellerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.pkg.pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuyer",
			Handler:    _UserService_CreateBuyer_Handler,
		},
		{
			MethodName: "UpdateBuyerByUserID",
			Handler:    _UserService_UpdateBuyerByUserID_Handler,
		},
		{
			MethodName: "GetBuyerByUserID",
			Handler:    _UserService_GetBuyerByUserID_Handler,
		},
		{
			MethodName: "DelBuyerByUserID",
			Handler:    _UserService_DelBuyerByUserID_Handler,
		},
		{
			MethodName: "CreateSeller",
			Handler:    _UserService_CreateSeller_Handler,
		},
		{
			MethodName: "UpdateSellerByID",
			Handler:    _UserService_UpdateSellerByID_Handler,
		},
		{
			MethodName: "GetSellerByID",
			Handler:    _UserService_GetSellerByID_Handler,
		},
		{
			MethodName: "DelSellerByID",
			Handler:    _UserService_DelSellerByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
